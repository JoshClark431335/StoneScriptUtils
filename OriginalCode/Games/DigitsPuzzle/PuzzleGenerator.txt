//DigitsPuzzle/PuzzleGenerator
//Version: v1.0
//Author: Okamiroy

//Read one code randomly from pool and parse it into array 

var PUZZLE_CODE_POOL = []
var ROW_COUNT = 4
var COL_COUNT = 4
var CELL_COUNT = ROW_COUNT * COL_COUNT
var PARSE_STEP = 2

InitPuzzleCodePool()

func GetPuzzle(isCustomPuzzle)
  var puzzleCode
  ?isCustomPuzzle
    var cusPuzzleClass = new Games/DigitsPuzzle/CustomPuzzle
    puzzleCode = cusPuzzleClass.CUSTOM_PUZZLE_CODE
  :
    var codeCount = PUZZLE_CODE_POOL.Count()
    var min = 0
    var max = PUZZLE_CODE_POOL.Count() - 1
    var codeIndex = min + rng % (max - min + 1)
    puzzleCode = PUZZLE_CODE_POOL[codeIndex]
  return ParsePuzzleFromCode(puzzleCode)

func ParsePuzzleFromCode(puzzleCode)
  var codeLength = string.Size(puzzleCode)
  ?codeLength = CELL_COUNT * PARSE_STEP
    var puzzle = []
    var cellRow = []  
    var temp = ""
    for i = 0 .. CELL_COUNT - 1
      temp = string.Sub(puzzleCode, i * PARSE_STEP, PARSE_STEP)    
      cellRow.Add(int.Parse(temp))
      ?i % COL_COUNT = COL_COUNT - 1
        puzzle.Add(cellRow)
        cellRow = []
    return puzzle
  :
    return null

func InitPuzzleCodePool()
  PUZZLE_CODE_POOL = [
    "02101105060701030812150414130900",
    "11041407130612030508021009001501",
    "06140002010507031112041008130915",
    "07040015060208141112010313100905",
    "12060702131103011504081410050900",
    "09080412140510000213061501070311",
    "13070214110610001508040905011203",
    "11130903040607120010150102140508",
    "08120513020604000301111409101507",
    "05090713021208110015010304141006",
    "10030013151209020104060511071408",
    "03060914131101101215040205070800",
    "11011405060810151309000403120702",
    "11121309041401000210050308061507",
    "12070406011405101508000902031311",
    "11130001071404031210080205061509",
    "05140601131511030409000212081007",
    "14060003051309150408120102071011",
    "08070402121306031410051511090100",
    "11090806151312000207140403100105",
    "01081405071303001002150609041112",
    "04091408031307011006050215121100",
    "14021312070511150410030801090600",
    "06121105140301041307001009081502",
    "06151105101202091314080107040300",
    "04110901050215071213100308140600",
    "11130706020901001415121003050408",
    "07110012100508010413140906030215",
    "09060407120501111503101408001302",
    "10090005141201061315030411070802",
    "12061102090804000710050113150314",
    "07150103120805000213091404100611",
    "11020012091307011008030415140605",
    "12010813070906001105140402031015",
    "12091102150601031307051410000408",
    "02011405110608000904070312131510",
    "15130403020614001012090705081101",
    "06071011040515020301081309001214",
    "05061114090415030210000807120113",
    "05071011090112060213001403081504",
    "15051107140106020308100413091200",
    "09010611021012140703000513150408",
    "07110004011015130805030912140206",
    "10081211090715000302050113041406",
    "08011113151002140709000504120306",
    "11100214011513040008050703091206",
    "04130510011209070008061502110314",
    "04121403010515110913020807100600",
    "09081506140503111007000213120401",
    "12040103110806020513000715141009",
    "14130704100812020506030109001511",
    "08150701101312060504111409020300",
    "08070010111406021204030915051301",
    "12080704051401101511130306020900",
    "08040113121406110715050309000210",
    "09010012020813041106030510071514",
    "07050302121004110906001314011508",
    "11061512040509071002130114030800",
    "06091405040710021215130103110800",
    "06120115091107040502000313081014",
    "02070603111314040010051215010809",
    "11020409151303080005120714100601",
    "14150105030211080004071210130609",
    "11051310150108061403020407120900",
    "09130205060114041007001503081211",
    "02130003110405081407151209100106",
    "11120601090213100715001403040805",
    "09061505011204080211100307131400",
    "03011110120215000907061308140504",
    "00090106120410141303050711020815",
    "15020614070810090001120413030511",
    "13011205030614100011150708090402",
    "12070601130504150002111410080903",
    "00050115020310070809061304111214",
    "12030806070109020015110405131410",
    "09060308050201001407111012130415",
    "08100115050904070006111214030213",
    "11051204020813010910000607031415",
    "05040013070809021103140112150610",
    "05081311070904031206100214150100",
    "15100406010208071412000313110905",
    "15041002010811000305070612141309",
    "11060002090801041203071505131410",
    "04021503071308001412050106100911",
    "01150205130709140411081006031200",
    "15021004090713080503141201000611",
    "13070810060905120003040111150214",
    "00010806150912130210051411040703",
    "10041107120615130508000309020114",
    "13060309100414071501020805111200",
    "15140408111209000610021301050703",
    "00060812020903131011140507041501",
    "04070614010212150008031109051013",
    "13150803051412061004020907011100",
    "12090003141013040711050108150206",
    "08010709060510111514120413020300",
    "06010913120814020503150711100400",
    "14130203070106040005150809101211",
    "08111202010906140003071513051004",
    "04090802110307151005130614000112"
  ]
